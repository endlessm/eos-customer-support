#!/bin/bash -e

# Upgrade from eos2 to eos3

# Removes all installed legacy app bundles,
# points to the latest ostree branches,
# and starts the ostree upgrade process.
# Requires the user to re-install any desired
# apps as flatpaks from the app center
# after rebooting into eos3.

ARGS=$(getopt -o fsh -l "force,skip,help" -n "$0" -- "$@")
eval set -- "$ARGS"

usage() {
    cat <<EOF
Remove all legacy apps and upgrade from eos2 to eos3
Usage:
   $0
Options:
   -f,--force   don't ask for confirmation
   -s,--skip    skip the final step to actually perform the ostree upgrade
   -h,--help    show this message
EOF
}

FORCE=false
SKIP=false
while true; do
    case "$1" in
        -f|--force)
            FORCE=true
            shift
            ;;
        -s|--skip)
            SKIP=true
            shift
            ;;
        -h|--help)
            usage
            exit 0
            ;;
        --)
            shift
            break
            ;;
    esac
done

USERID=$(id -u)
if [ "$USERID" != "0" ]; then
    echo "Program requires superuser privileges"
    exit 1
fi

LATEST_VERSION=2.6.10
version=`grep VERSION= /etc/os-release | awk -F '"' '{print $2}'`
major_version=`echo ${version} | awk -F '.' '{print $1}'`

if [ ${version} != ${LATEST_VERSION} ]; then
    echo "This script only works with Endless OS version ${LATEST_VERSION}"
    if [ ${major_version} == 2 ]; then
        echo "Please update the OS and try again"
    elif [ ${major_version} == 3 ]; then
        echo "You already are running Endless OS version 3"
    else
        echo "You are running an unsupported version: ${version}"
    fi
    exit 1
fi

if ! $FORCE; then
    echo
    echo "You are about to upgrade Endless OS from version 2 to version 3."
    echo
    echo "Endless OS 3 uses a new technology for applications called flatpak,"
    echo "which is a standard format for deploying Linux applications that enables"
    echo "Endless to run applications distributed by other development teams."
    echo
    echo "The legacy application format is no longer supported, and the first step"
    echo "of the upgrade process is to remove all installed application bundles."
    echo "Also, all the ongoing and pending printers jobs will be cancelled and"
    echo "any locally configured printer, as well as any driver that would have been"
    echo "downloaded from the internet, will be uninstalled to make sure you start"
    echo "clean after the upgrade, when you will need to reinstall your printers."
    echo
    echo "Then, roughly a gigabyte of data will be downloaded from the internet,"
    echo "which may take a long time and incur data charges depending on your"
    echo "internet connection and contract with your provider."
    echo
    echo "In the meantime, while downloading Endless OS 3, you may continue"
    echo "to use Endless OS 2 and some of the core applications such as"
    echo "the internet browser and office applications."
    echo "Once the upgrade to Endless OS 3 is downloaded and ready, you will be"
    echo "asked to reboot, and then you will be able to install new flatpak apps"
    echo "from the Endless OS 3 app center."
    echo
    echo "Once the download completes, it will take several additional minutes"
    echo "for the deployment to complete -- please be patient and wait until"
    echo "you see the 'Upgrade complete!' message."
    echo
    read -p "Are you sure you want to remove all legacy app bundles and proceed? [y/N] "
    response=${REPLY,,} # to lower
    if [[ ! $response =~ ^(yes|y)$ ]]; then
        exit 1
    fi
fi

# Stop any updates in progress, and prevent the timer from restarting them
systemctl stop eos-autoupdater.timer || true
systemctl stop eos-autoupdater.service || true
killall eos-updater || true

# For older installs (eos2.3.x and earlier), we had a separate boot
# partition which we no longer support on eos3
if [ ! "$(ls -A /sysroot/boot)" ]; then
    echo "Migrating separate boot partition into main partition"
    # Get the boot partition (e.g., /dev/sda1 or /dev/mmcblk0p1)
    boot_part=`findmnt -T /boot -o SOURCE -n`
    # Extract the device name (e.g., /dev/sda or /dev/mmblk0)
    boot_dev=`echo $boot_part | sed 's/p*[0-9]\+$//'`
    # Copy the contents from /boot to the main partition
    cp -a /boot/* /sysroot/boot
    # Manually unmount the boot partition
    umount /boot
    # Re-install the bootloader, telling it to look for config files
    # in the main partition
    grub-install --boot-directory=/sysroot/boot --modules="ext2 part_msdos part_gpt" --directory=/usr/lib/grub/i386-pc $boot_dev
    sync
    # Remove the old boot partition
    sfdisk --dump $boot_dev | grep -v $boot_part | sfdisk --force $boot_dev
    # Bind-mount /boot as required by ostree (normally would happen on reboot)
    mount -o bind /sysroot/boot /boot
fi

# Attempt a clean uninstall of all installed apps
for app in `eamctl list-apps`
do
    echo Uninstalling $app
    eamctl uninstall $app || true
done

# Forcibly cleanup the app installation directories,
# just in case anything useless was left behind
rm -rf /var/endless || true
rm -rf /var/endless-extra/* || true

# Remove any existing subscriptions app data for all users
rm -rf /home/*/.local/share/com.endlessm.subscriptions

# Remove the Flash/Widevine plugin version file to force an update
# from 32-bit to 64-bit upon reboot (but leave the actual plugins
# intact for continued use while the upgrade is downloading)
rm -f /var/lib/chromium-plugins-extra/eos-chrome-plugin-updater/VERSION.txt

# Remove all the installed printers to force users reconfigure them
# against the 64bit drivers that available in the updated system.
#
# Note that we need to stop CUPS before removing anything, so that
# we can get a complete list of printers regardless of their status
# as well as to ensure that the configuration files handled by CUPS
# e.g. /etc/cups/printers.conf) are correctly updated on restart.
systemctl stop cups 2> /dev/null
printers=$(lpstat -p 2> /dev/null | grep ^printer | cut -d ' ' -f 2)
if [ -n "$printers" ]; then
    echo "Cancelling all pending printing jobs..."
    cancel -a -x

    for printer in $printers; do
        echo "Uninstalling printer '$printer'..."
        lpadmin -x "$printer"
    done
else
    echo "No printers found"
fi
systemctl start cups 2> /dev/null

# Remove drivers downloaded from OpenPrinting, if any, along with
# the symlinks created under /var/lib/eos-config-printer/ppd.
ecp_ppd_dir="/var/lib/eos-config-printer/ppd"
if [ -d $ecp_ppd_dir ] && [ -n "$(ls $ecp_ppd_dir 2> /dev/null)" ]; then
    for driver_symlink in $ecp_ppd_dir/*; do
        if [ ! -h $driver_symlink ]; then
            echo "$driver_symlink is not a symbolic link"
            break
        fi

        target=$(readlink $driver_symlink)
        if [ -z $target ]; then
            echo "Could not read target for symbolic link $driver_symlink"
            break
        fi

        if [ ! -e $target ] || [[ $target != "/opt/"* ]]; then
            echo "Symbolic link $driver_symlink points to invalid target"
            unlink $driver_symlink
            break
        fi

        # Found the PPD directory inside the driver's directory, now search
        # for the driver's top directory so that we can remove everything.
        driver_topdir=$target
        current_dir=$(dirname $target)
        while [ $current_dir != "/opt" ]; do
            driver_topdir=$current_dir
            current_dir=$(dirname $current_dir)
        done

        # Sanity check to make sure we're recursively removing a
        # a directory in /opt, not /opt itself (or anything else).
        # For instance: /opt/epson-inkjet-printer-201207w
        if [ -d $driver_topdir ] && [[ $driver_topdir == "/opt/"?* ]]; then
            driver_name=$(basename $driver_topdir)
            echo "Removing driver downloaded from OpenPrinting: $driver_name"
            rm -rf $driver_topdir
            unlink $driver_symlink
        fi
    done

    # Restart CUPS after removing the drivers to make sure it
    # picks up the changes and reflects them in the PPD database.
    systemctl restart cups 2> /dev/null
fi

# Figure out the architecture / product
machine=`uname -m`
case "$machine" in
    armv7l)
        arch=armhf
        prod=ec100
        ;;
    x86_64)
        arch=amd64
        prod=amd64
        ;;
    *)
        echo Unexpected machine architecture $machine
        exit 1
        ;;
esac

# Set up the ostree and flatpak repo config
cat <<EOF > /ostree/repo/config
[core]
repo_version=1
mode=bare

[remote "eos"]
url=https://ostree.endlessm.com/ostree/eos-$arch
branches=os/eos/$prod/eos3;
xa.disable=true

[remote "eos-runtimes"]
gpg-verify=true
gpg-verify-summary=true
url=https://ostree.endlessm.com/ostree/eos-$arch

[remote "eos-apps"]
gpg-verify=true
gpg-verify-summary=true
url=https://ostree.endlessm.com/ostree/eos-apps

[remote "eos-external-apps"]
gpg-verify=false
gpg-verify-summary=false
url=file:///var/lib/flatpak-external-apps
EOF

if [ -e /dev/disk/by-label/extra ]; then
    # Split disk image
    # Create the flatpak directory and repo on the secondary storage
    mkdir -p /var/endless-extra/flatpak
    ostree init --mode=bare-user --repo /var/endless-extra/flatpak/repo
    # Overwrite the config file
    # This is identical to the main ostree config, except the mode
    # is "bare-user", and there is no specification of the "eos" remote
    cat <<EOF > /var/endless-extra/flatpak/repo/config
[core]
repo_version=1
mode=bare-user

[remote "eos-runtimes"]
gpg-verify=true
gpg-verify-summary=true
url=https://ostree.endlessm.com/ostree/eos-$arch

[remote "eos-apps"]
gpg-verify=true
gpg-verify-summary=true
url=https://ostree.endlessm.com/ostree/eos-apps

[remote "eos-external-apps"]
gpg-verify=false
gpg-verify-summary=false
url=file:///var/lib/flatpak-external-apps
EOF
fi

# Set the default branch for the flatpak repo
mkdir -p /etc/gnome-software
cat <<EOF > /etc/gnome-software/flatpak-extra.conf
[remote:eos-apps]
default-branch=eos3
EOF

# Change the refspec for the currently deployed ostree
deployment=`ostree admin status | grep '* eos' | awk -F ' ' '{print $3}'`
cat <<EOF > /ostree/deploy/eos/deploy/$deployment.origin
[origin]
refspec=eos:os/eos/$prod/eos3
EOF

if ! $SKIP; then
    # Perform the ostree upgrade
    # Note that if there has not been an eos3 release since
    # the latest eos2 release, this chronologically will appear
    # to ostree as a "downgrade", so we should explicitly allow it
    ostree admin upgrade --allow-downgrade

    # Set up a service that installs the EknServices flatpak
    # upon rebooting into the eos3 deployment and then deletes itself
    # After completing the ostree upgrade, there are two deployments:
    # the current one starts with '* eos ', and we want the new one
    # that is not yet deployed that starts with '  eos '
    new_deployment_id=`ostree admin status | grep '  eos ' | awk '{print $2}'`
    new_deployment=/ostree/deploy/eos/deploy/$new_deployment_id
    mkdir -p $new_deployment/etc/systemd/system/multi-user.target.wants
    cat <<EOF > $new_deployment/etc/systemd/system/finish-eos3-upgrade.service
[Unit]
Description=Finish upgrade to eos3
Wants=NetworkManager-wait-online.service
After=NetworkManager-wait-online.service

[Service]
Type=oneshot
ExecStart=/bin/sh -c "flatpak install eos-apps com.endlessm.EknServices eos3 && rm /etc/systemd/system/multi-user.target.wants/finish-eos3-upgrade.service && rm /etc/systemd/system/finish-eos3-upgrade.service && systemctl daemon-reload"
EOF
    ln -srf $new_deployment/etc/systemd/system/finish-eos3-upgrade.service $new_deployment/etc/systemd/system/multi-user.target.wants

    # All done
    echo "Upgrade complete! Please reboot the computer to start using Endless OS 3"
fi
